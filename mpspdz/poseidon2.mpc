from math import ceil, log, gcd, floor, comb

from Compiler.library import print_ln, start_timer, stop_timer

import random

class Poseidon2:
    def __init__(self, p, t, Me, Mi, round_constants):
        self.alpha = Poseidon2.get_alpha(p)
        self.t = t
        self.Me = cint.Matrix(t, t)
        self.Me.assign(Me)
        self.Mi = cint.Array(t)
        self.Mi.assign(Mi)
        Re, Ri = Poseidon2.find_FD_round_numbers(p, t, self.alpha, 128, Poseidon2.get_sbox_cost, True)
        self.Re = Re
        self.Ri = Ri
        self.round_constants = cint.Matrix(Re + Ri, t) 
        self.round_constants.assign(round_constants)

    @staticmethod
    def get_alpha(p):
        for alpha in range(3, p):
            if gcd(alpha, p - 1) == 1:
                break
        return alpha

    @staticmethod
    def find_FD_round_numbers(p, t, alpha, M, cost_function, security_margin):
        n = ceil(log(p, 2))
        N = int(n * t)
        sat_inequiv = Poseidon2.sat_inequiv_alpha
        R_P = 0
        R_F = 0
        min_cost = float("inf")
        max_cost_rf = 0
        # Brute-force approach
        for R_P_t in range(1, 500):
            for R_F_t in range(4, 100):
                if R_F_t % 2 == 0:
                    if (sat_inequiv(p, t, R_F_t, R_P_t, alpha, M) == True):
                        if security_margin == True:
                            R_F_t += 2
                            R_P_t = int(ceil(float(R_P_t) * 1.075))
                        cost = cost_function(R_F_t, R_P_t, N, t)
                        if (cost < min_cost) or ((cost == min_cost) and (R_F_t < max_cost_rf)):
                            R_P = ceil(R_P_t)
                            R_F = ceil(R_F_t)
                            min_cost = cost
                            max_cost_rf = R_F
        return (int(R_F), int(R_P))

    @staticmethod
    def sat_inequiv_alpha(p, t, R_F, R_P, alpha, M):
        N = int(log(p,2) * t)
        if alpha > 0:
            R_F_1 = 6 if M <= ((floor(log(p, 2) - ((alpha-1)/2.0))) * (t + 1)) else 10 # Statistical
            R_F_2 = 1 + ceil(log(2, alpha) * min(M, log(p,2))) + ceil(log(t, alpha)) - R_P # Interpolation
            R_F_3 = (log(2, alpha) * min(M, log(p, 2))) - R_P # Groebner 1
            R_F_4 = t - 1 + log(2, alpha) * min(M / float(t + 1), log(p, 2) / float(2)) - R_P # Groebner 2
            R_F_5 = (t - 2 + (M / float(2 * log(alpha, 2))) - R_P) / float(t - 1) # Groebner 3
            R_F_max = max(ceil(R_F_1), ceil(R_F_2), ceil(R_F_3), ceil(R_F_4), ceil(R_F_5))
            
            # Addition due to https://eprint.iacr.org/2023/537.pdf
            r_temp = floor(t / 3.0)
            over = (R_F - 1) * t + R_P + r_temp + r_temp * (R_F / 2.0) + R_P + alpha
            under = r_temp * (R_F / 2.0) + R_P + alpha
            binom_log = log(comb(int(over), int(under)), 2)
            #if binom_log == inf:
            #    binom_log = M + 1
            cost_gb4 = ceil(2 * binom_log) # Paper uses 2.3727, we are more conservative here
            return ((R_F >= R_F_max) and (cost_gb4 >= M))
        else:
            print("Invalid value for alpha!")
            exit(1)

    @staticmethod
    def get_sbox_cost(R_F, R_P, N, t):
        return int(t * R_F + R_P)

    def addrc_e(self, state, r):
        for i in range(t):
            state[i] = state[i] + self.round_constants[r][i]
        return state

    def addrc_i(self, state, r):
        state[0] = state[0] + self.round_constants[r][0]
        return state


    def compute_cube(self, x):
        r, rsq = sint.get_random_square()
        r_cube = r * rsq
        y = (x - r).reveal()
        return 3 * y * rsq + 3 * y ** 2 * r + y ** 3 + r_cube

    def pow_7(self, x):
        x2 = x * x
        x6 = self.compute_cube(x2)
        return x * x6

    def nonlinear_e(self, state):
        for i in range(t):
            state[i] = self.compute_cube(state[i])
            #state[i] = self.pow_7(state[i])
            #state[i] = state[i] ** self.alpha
        return state

    def nonlinear_i(self, state):
        state[0] = self.compute_cube(state[0])
        #state[0] = self.pow_7(state[0])
        #state[0] = state[0] ** 2
        return state

    def linear_e(self, state):
        out = sint.Array(t)
        for i in range(t):
            for j in range(t):
                out[i] = out[i] + self.Me[i][j] * state[j]
        return out

    def linear_i(self, state):
        sum_ = sum(s for s in state)
        for i in range(t):
            state[i] = sum_ + self.Mi[i] * state[i]
        return state

    def permutation(self, state):
        state = self.linear_e(state)
        for r in range(self.Re//2):
            state = self.addrc_e(state, r)
            state = self.nonlinear_e(state)
            state = self.linear_e(state)
        for r in range(self.Ri):
            state = self.addrc_i(state, r + self.Re//2)
            state = self.nonlinear_i(state)
            state = self.linear_i(state)
        for r in range(self.Re//2):
            state = self.addrc_e(state, r + self.Re//2 + self.Ri)
            state = self.nonlinear_e(state)
            state = self.linear_e(state)
        return state

    def compress_hash(self, input):
        assert len(input) <= t, ('Input does not fit into state')
        output = self.permutation(input)
        return output

    def hash_chain(self, input, chainlen):
        output = input
        for _ in range(chainlen):
            output = self.compress_hash(output)
        return output



# default values
#p = 2**31 - 1
#p = 2**31 - 2**27 + 1
p = 2**31 - 2**24 + 1
t = 16

chunks  = 42
w       = 4

args = len(program.args)
if args > 2:
    print_ln("args detected")
    chunks = int(program.args[1])
    w      = int(program.args[2])

if t == 16:
    Me = [[10, 14, 2, 6, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3],
    [8, 12, 2, 2, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1],
    [2, 6, 10, 14, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7],
    [2, 2, 8, 12, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6],
    [5, 7, 1, 3, 10, 14, 2, 6, 5, 7, 1, 3, 5, 7, 1, 3],
    [4, 6, 1, 1, 8, 12, 2, 2, 4, 6, 1, 1, 4, 6, 1, 1],
    [1, 3, 5, 7, 2, 6, 10, 14, 1, 3, 5, 7, 1, 3, 5, 7],
    [1, 1, 4, 6, 2, 2, 8, 12, 1, 1, 4, 6, 1, 1, 4, 6],
    [5, 7, 1, 3, 5, 7, 1, 3, 10, 14, 2, 6, 5, 7, 1, 3],
    [4, 6, 1, 1, 4, 6, 1, 1, 8, 12, 2, 2, 4, 6, 1, 1],
    [1, 3, 5, 7, 1, 3, 5, 7, 2, 6, 10, 14, 1, 3, 5, 7],
    [1, 1, 4, 6, 1, 1, 4, 6, 2, 2, 8, 12, 1, 1, 4, 6],
    [5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 10, 14, 2, 6],
    [4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 8, 12, 2, 2],
    [1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 2, 6, 10, 14],
    [1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 2, 2, 8, 12]]
else:
    Me = [[10, 14, 2, 6, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3],
    [8, 12, 2, 2, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1],
    [2, 6, 10, 14, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7],
    [2, 2, 8, 12, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6],
    [5, 7, 1, 3, 10, 14, 2, 6, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3],
    [4, 6, 1, 1, 8, 12, 2, 2, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1],
    [1, 3, 5, 7, 2, 6, 10, 14, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7],
    [1, 1, 4, 6, 2, 2, 8, 12, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6],
    [5, 7, 1, 3, 5, 7, 1, 3, 10, 14, 2, 6, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3],
    [4, 6, 1, 1, 4, 6, 1, 1, 8, 12, 2, 2, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1],
    [1, 3, 5, 7, 1, 3, 5, 7, 2, 6, 10, 14, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7],
    [1, 1, 4, 6, 1, 1, 4, 6, 2, 2, 8, 12, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6],
    [5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 10, 14, 2, 6, 5, 7, 1, 3, 5, 7, 1, 3],
    [4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 8, 12, 2, 2, 4, 6, 1, 1, 4, 6, 1, 1],
    [1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 2, 6, 10, 14, 1, 3, 5, 7, 1, 3, 5, 7],
    [1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 2, 2, 8, 12, 1, 1, 4, 6, 1, 1, 4, 6],
    [5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 10, 14, 2, 6, 5, 7, 1, 3],
    [4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 8, 12, 2, 2, 4, 6, 1, 1],
    [1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 2, 6, 10, 14, 1, 3, 5, 7],
    [1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 2, 2, 8, 12, 1, 1, 4, 6],
    [5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 10, 14, 2, 6],
    [4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 8, 12, 2, 2],
    [1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 2, 6, 10, 14],
    [1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 2, 2, 8, 12]]


# Mersenne 31
if p == 2**31 - 1:
    if t == 16:
        Mi = [129501892, 1809435443, 1223573407, 1331944729, 415581875, 1526242955, 1341275624, 1333308150, 1404946132, 1549369918, 709303410, 1284988537, 1490838740, 115945821, 754131590, 800486749]
        round_constants = [[1988864850, 1893772157, 1025928330, 1839472709, 1611656994, 1104858731, 1694088660, 1564660990, 1991332205, 1875486487, 1890340790, 1658614, 582370530, 528029397, 1196956642, 655401251], [1652877415, 26032894, 1576640243, 1277052539, 1450142396, 697623591, 1401580866, 1568404175, 2145004971, 265835716, 1183985610, 1031234465, 436012490, 172735299, 352802897, 1032863094], [757665783, 1082171296, 1507509996, 309929890, 1807683232, 43258895, 611592566, 1854193793, 575164234, 894217817, 72613857, 1061659596, 8921166, 1617355017, 998001536, 1800758877], [1002748055, 1935405944, 1351462722, 411368491, 1913975372, 1956167178, 442558016, 855898408, 699687798, 1553382248, 1708169125, 490049183, 1251643415, 1193594742, 880473871, 511174042], [2139014335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [69309039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1368974953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [886780232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1130937085, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1718115455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2027103386, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1612216449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1994053242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110146615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [514413329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1088763546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [955319292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [488794657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1460209171, 530850056, 398192464, 536338716, 75179210, 1309934197, 1335920373, 127611036, 291093831, 1832379621, 123571662, 303176864, 2137685056, 1759609530, 1418928155, 71608334], [6616262, 1684515814, 1721194338, 720801691, 878392254, 460379263, 87930647, 940673483, 1136203256, 551499412, 256220454, 2007034235, 796124985, 410436345, 1705042586, 1286336446], [1522340456, 1295296352, 309794713, 1772145068, 956898901, 2137070800, 988829146, 2059451359, 1846491684, 1105442551, 1236497773, 1452000568, 549485016, 385992492, 1987107948, 1514377269], [2090065934, 1444920141, 293113979, 41120774, 855319793, 1663284746, 1789994008, 1120509162, 358222743, 1406256810, 735183687, 664485235, 1331641456, 38121324, 595810771, 1234594393]]
    else:
        Mi = [215477482, 122291998, 1722461950, 473123685, 1292455088, 797276585, 654919449, 1895863245, 1406416300, 1929814287, 1465288965, 1231542495, 2138333822, 109188185, 1200452900, 514638376, 1696534848, 1123260399, 618961622, 1554208511, 1123221737, 802164868, 682124419, 272892596]
        round_constants = [[535476833, 1394754644, 1808710114, 1343879604, 1215456658, 723701928, 1632746489, 793201441, 783676215, 996433287, 155373296, 1696762962, 2030023439, 1294481352, 236432463, 89417350, 74188492, 189907894, 1452128099, 951268580, 1475718384, 433268241, 2010132299, 1820518840], [1900593590, 134642805, 1188161737, 815217415, 543248187, 1547696209, 810562345, 1232267212, 47306940, 165003174, 158401728, 2074384948, 1242022652, 616689257, 682011457, 1569786016, 980963783, 500471289, 313827316, 2074957664, 1609393346, 1727383916, 2125446402, 968055099], [1248148297, 1963531713, 1457817824, 386179925, 1952337907, 959377774, 836976607, 46304358, 918751290, 822399482, 1526975907, 1715593647, 930433878, 963599097, 437929498, 1754146546, 1870829444, 465116521, 1534623766, 1883940293, 25265820, 1092689494, 216531872, 599782304], [402354276, 1194422816, 1989233491, 563878149, 375739688, 1307792708, 1619035237, 860944435, 62705095, 176625674, 24812021, 1855215398, 356799748, 2013606833, 999407416, 1070038705, 1263375886, 1020869934, 245688694, 491980492, 981123716, 247605556, 1301780243, 1369709669], [578251281, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1604534888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [336941709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1447017748, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [888427076, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [302948790, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [638806181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [661020353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [918431749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [878462852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [401595585, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [960390448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1839248568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [837148371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1734027180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [183012400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1467498956, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1608543724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1454401818, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1916984863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1010267433, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [865826083, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [476455577, 92050778, 2058797298, 631680266, 1971653464, 1224554387, 188966577, 266145097, 2108955129, 1236913167, 1217697558, 700668048, 1984189573, 472371980, 279607867, 821252022, 1876976693, 34823885, 1823128214, 1051889872, 587042107, 1988826405, 1542019092, 1379762153], [1441352940, 1204039199, 447036254, 802291326, 1495469713, 1953684070, 1682174687, 765321629, 1870621316, 2004878384, 251743176, 2079576213, 649057048, 1478844919, 1591941516, 1791754240, 791764518, 667598912, 630523934, 1499707354, 2114401637, 1827927537, 167289764, 229166334], [1623073637, 2128036597, 1720418353, 1269838996, 1493275443, 1879976056, 482629718, 487987191, 2073595302, 1320457068, 2026502270, 1674460820, 1903703067, 1169960838, 95909308, 1883963972, 703517304, 1207185458, 556249829, 429363263, 615763459, 204614028, 2099998522, 402434689], [1928560623, 807987113, 1591561622, 529946683, 1289130378, 344461070, 1763115865, 389856563, 157935604, 1853825963, 1635969671, 1305157468, 1482662163, 1922872246, 28549754, 463565799, 1261681898, 1675180987, 1799339929, 1863838161, 205379770, 197261736, 1691612016, 1180330520]]
# BabyBear
elif p == 2**31 - 2**27 + 1:
    if t == 16:
        Mi = [174271892, 1840666551, 1459346590, 86719882, 863261185, 1543704716, 199992187, 629943947, 302161721, 1766394318, 1831016228, 566473250, 1007223973, 30846170, 661675139, 1378994178]
        round_constants = [[1774958255, 1185780729, 1621102414, 1796380621, 588815102, 1932426223, 1925334750, 747903232, 89648862, 360728943, 977184635, 1425273457, 256487465, 1200041953, 572403254, 448208942], [1215789478, 944884184, 953948096, 547326025, 646827752, 889997530, 1536873262, 86189867, 1065944411, 32019634, 333311454, 456061748, 1963448500, 1827584334, 1391160226, 1348741381], [88424255, 104111868, 1763866748, 79691676, 1988915530, 1050669594, 359890076, 573163527, 222820492, 159256268, 669703072, 763177444, 889367200, 256335831, 704371273, 25886717], [51754520, 1833211857, 454499742, 1384520381, 777848065, 1053320300, 1851729162, 344647910, 401996362, 1046925956, 5351995, 1212119315, 754867989, 36972490, 751272725, 506915399], [1518359488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1765533241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [945325693, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [422793067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [311365592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1311448267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1629555936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1009879353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [190525218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [786108885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [557776863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [212616710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [605745517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1922082829, 1870549801, 1502529704, 1990744480, 1700391016, 1702593455, 321330495, 528965731, 183414327, 1886297254, 1178602734, 1923111974, 744004766, 549271463, 1781349648, 542259047], [1536158148, 715456982, 503426110, 340311124, 1558555932, 1226350925, 742828095, 1338992758, 1641600456, 1843351545, 301835475, 43203215, 386838401, 1520185679, 1235297680, 904680097], [1491801617, 1581784677, 913384905, 247083962, 532844013, 107190701, 213827818, 1979521776, 1358282574, 1681743681, 1867507480, 1530706910, 507181886, 695185447, 1172395131, 1250800299], [1503161625, 817684387, 498481458, 494676004, 1404253825, 108246855, 59414691, 744214112, 890862029, 1342765939, 1417398904, 1897591937, 1066647396, 1682806907, 1015795079, 1619482808]]
    else:
        Mi = [1083257840, 375892129, 111593398, 1867716110, 658182609, 51866717, 1928969209, 1942928017, 1558116381, 20525701, 1188752902, 106789798, 1389833583, 98371040, 1001081699, 1792686146, 801504236, 1997365680, 1461037801, 65998480, 1974912880, 606789471, 13683276, 91861082]
        round_constants = [[262278199, 127253399, 314968988, 246143118, 157582794, 118043943, 454905424, 815798990, 1004040026, 1773108264, 1066694495, 1930780904, 1180307149, 1464793095, 1660766320, 1389166148, 343354132, 1307439985, 638242172, 525458520, 1964135730, 1751797115, 1421525369, 831813382], [695835963, 1845603984, 540703332, 1333667262, 1917861751, 1170029417, 1989924532, 1518763784, 1339793538, 622609176, 686842369, 1737016378, 1282239129, 897025192, 716894289, 1997503974, 395622276, 1201063290, 1917549072, 1150912935, 1687379185, 1507936940, 241306552, 989176635], [1147522062, 27129487, 1257820264, 142102402, 217046702, 1664590951, 855276054, 1215259350, 946500736, 552696906, 1424297384, 538103555, 1608853840, 162510541, 623051854, 1549062383, 1908416316, 1622328571, 1079030649, 1584033957, 1099252725, 1910423126, 447555988, 862495875], [128479034, 1587822577, 608401422, 1290028279, 342857858, 825405577, 427731030, 1718628547, 588764636, 204228775, 1454563174, 1740472809, 1338899225, 1269493554, 53007114, 1647670797, 306391314, 172614232, 51256176, 1221257987, 1239734761, 273790406, 1781980094, 1291790245], [497520322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1930103076, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1052077299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1540960371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [924863639, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1365519753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1726563304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [440300254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1891545577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [822033215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1111544260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [308575117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1708681573, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1240419708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1199068823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1186174623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1551596046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1886977120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1327682690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1210751726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1810596765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [53041581, 723038058, 1439947916, 1136469704, 205609311, 1883820770, 14387587, 720724951, 1854174607, 1629316321, 530151394, 1679178250, 1549779579, 48375137, 976057819, 463976218, 875839332, 1946596189, 434078361, 1878280202, 1363837384, 1470845646, 1792450386, 1040977421], [1209164052, 714957516, 390340387, 1213686459, 790726260, 117294666, 140621810, 993455846, 1889603648, 78845751, 925018226, 708123747, 1647665372, 1649953458, 942439428, 1006235079, 238616145, 930036496, 1401020792, 989618631, 1545325389, 1715719711, 755691969, 150307788], [1567618575, 1663353317, 1950429111, 1891637550, 192082241, 1080533265, 1463323727, 890243564, 158646617, 1402624179, 59510015, 1198261138, 1065075039, 1150410028, 1293938517, 76770019, 1478577620, 1748789933, 457372011, 1841795381, 760115692, 1042892522, 1507649755, 1827572010], [1206940496, 1896271507, 1003792297, 738091882, 1124078057, 1889898, 813674331, 228520958, 1832911930, 781141772, 459826664, 202271745, 1296144415, 1111203133, 1090783436, 641665156, 1393671120, 1303271640, 809508074, 162506101, 1262312258, 1672219447, 1608891156, 1380248020]]
else:
    if t== 16:
        Mi = [479859441, 1064293388, 236801731, 325174860, 162067567, 64109119, 278581903, 683867015, 996448497, 1960361558, 1782740945, 415413203, 1649591051, 130819423, 547348826, 1386569643]
        round_constants = [[2128964168, 288780357, 316938561, 2126233899, 426817493, 1714118888, 1045008582, 1738510837, 889721787, 8866516, 681576474, 419059826, 1596305521, 1583176088, 1584387047, 1529751136], [1863858111, 1072044075, 517831365, 1464274176, 1138001621, 428001039, 245709561, 1641420379, 1365482496, 770454828, 693167409, 757905735, 136670447, 436275702, 525466355, 1559174242], [1030087950, 869864998, 322787870, 267688717, 948964561, 740478015, 679816114, 113662466, 2066544572, 1744924186, 367094720, 1380455578, 1842483872, 416711434, 1342291586, 1692058446], [1493348999, 1113949088, 210900530, 1071655077, 610242121, 1136339326, 2020858841, 1019840479, 678147278, 1678413261, 1361743414, 61132629, 1209546658, 64412292, 1936878279, 1980661727], [1423960925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2101391318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1915532054, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [275400051, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1168624859, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1141248885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [356546469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1165250474, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1320543726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [932505663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1204226364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1452576828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1774936729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [926808140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1184948056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1186493834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [843181003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [185193011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [452207447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [510054082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1139268644, 630873441, 669538875, 462500858, 876500520, 1214043330, 383937013, 375087302, 636912601, 307200505, 390279673, 1999916485, 1518476730, 1606686591, 1410677749, 1581191572], [1004269969, 143426723, 1747283099, 1016118214, 1749423722, 66331533, 1177761275, 1581069649, 1851371119, 852520128, 1499632627, 1820847538, 150757557, 884787840, 619710451, 1651711087], [505263814, 212076987, 1482432120, 1458130652, 382871348, 417404007, 2066495280, 1996518884, 902934924, 582892981, 1337064375, 1199354861, 2102596038, 1533193853, 1436311464, 2012303432], [839997195, 1225781098, 2011967775, 575084315, 1309329169, 786393545, 995788880, 1702925345, 1444525226, 908073383, 1811535085, 1531002367, 1635653662, 1585100155, 867006515, 879151050]]
    else:
        Mi = [1931155452, 538139068, 582968472, 1628379688, 1014213188, 1778984344, 477935362, 2035496024, 2130062725, 1522083242, 1735535280, 868895998, 8355277, 250266653, 1193590438, 1173026382, 564578574, 155926863, 227812911, 410070063, 977732407, 1857713951, 1215834055, 1996569196]
        round_constants = [[487143900, 1829048205, 1652578477, 646002781, 1044144830, 53279448, 1519499836, 22697702, 1768655004, 230479744, 1484895689, 705130286, 1429811285, 1695785093, 1417332623, 1115801016, 1048199020, 878062617, 738518649, 249004596, 1601837737, 24601614, 245692625, 364803730], [1857019234, 1906668230, 1916890890, 835590867, 557228239, 352829675, 515301498, 973918075, 954515249, 1142063750, 1795549558, 608869266, 1850421928, 2028872854, 1197543771, 1027240055, 1976813168, 963257461, 652017844, 2113212249, 213459679, 90747280, 1540619478, 324138382], [1377377119, 294744504, 512472871, 668081958, 907306515, 518526882, 1907091534, 1152942192, 1572881424, 720020214, 729527057, 1762035789, 86171731, 205890068, 453077400, 1201344594, 986483134, 125174298, 2050269685, 1895332113, 749706654, 40566555, 742540942, 1735551813], [162985276, 1943496073, 1469312688, 703013107, 1979485151, 1278193166, 548674995, 2118718736, 749596440, 1476142294, 1293606474, 918523452, 890353212, 1691895663, 1932240646, 1180911992, 86098300, 1592168978, 895077289, 724819849, 1697986774, 1608418116, 1083269213, 691256798], [328586442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1572520009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1375479591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [322991001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [967600467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1172861548, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1973891356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1503625929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1881993531, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [40601941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1155570620, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [571547775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1361622243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1495024047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1733254248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [964808915, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [763558040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1887228519, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [994888261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [718330940, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [213359415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [603124968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1038411577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2099454809, 949846777, 630926956, 1168723439, 222917504, 1527025973, 1009157017, 2029957881, 805977836, 1347511739, 540019059, 589807745, 440771316, 1530063406, 761076336, 87974206, 1412686751, 1230318064, 514464425, 1469011754, 1770970737, 1510972858, 965357206, 209398053], [778802532, 40567006, 1984217577, 1545851069, 879801839, 1611910970, 1215591048, 330802499, 1051639108, 321036, 511927202, 591603098, 1775897642, 115598532, 278200718, 233743176, 525096211, 1335507608, 830017835, 1380629279, 560028578, 598425701, 302162385, 567434115], [1859222575, 958294793, 1582225556, 1781487858, 1570246000, 1067748446, 526608119, 1666453343, 1786918381, 348203640, 1860035017, 1489902626, 1904576699, 860033965, 1954077639, 1685771567, 971513929, 1877873770, 137113380, 520695829, 806829080, 1408699405, 1613277964, 793223662], [648443918, 893435011, 403879071, 1363789863, 1662900517, 2043370, 2109755796, 931751726, 2091644718, 606977583, 185050397, 946157136, 1350065230, 1625860064, 122045240, 880989921, 145137438, 1059782436, 1477755661, 335465138, 1640704282, 1757946479, 1551204074, 681266718]]


poseidon2 = Poseidon2(p, t, Me, Mi, round_constants)

program.name = "poseidon2"
print("Compiling: for p = " + str(p))

if w == 1:
    message = [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1]
elif w == 2:
    message = [1, 1, 3, 1, 2, 0, 3, 2, 2, 2, 3, 1, 1, 0, 1, 1, 3, 0, 3, 3, 0, 1, 3, 1, 2, 3, 2, 1, 3, 0, 0, 1, 3, 2, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 1, 0, 0, 2, 2, 3, 0, 0, 1, 0, 3, 1, 3, 0, 2, 1, 0, 3, 0, 2, 1, 2, 3, 3, 0, 0, 2, 0, 0, 2, 0, 3, 2]
elif w == 4:
    message = [7, 9, 10, 3, 6, 11, 3, 15, 12, 2, 15, 12, 5, 9, 1, 8, 11, 4, 0, 8, 3, 11, 8, 15, 8, 0, 7, 10, 15, 2, 15, 3, 13, 1, 1, 7, 13, 3, 6]
else:
    message = [114, 229, 169, 167, 114, 255, 172, 152, 165, 126, 72, 237, 107, 120, 17, 129, 83, 45, 63, 14]

secret_keys = [sint.Array(t) for _ in range(chunks)]

for _ in range(chunks):
    secret_keys.append(sint.Array(t))

start_timer(1)

sig = []
for c in range(chunks):
    sig.append(poseidon2.hash_chain(secret_keys[c], message[c]))

stop_timer(1)
